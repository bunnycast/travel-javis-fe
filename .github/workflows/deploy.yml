# .github/workflows/deploy.yml
name: CI/CD Deploy Frontend to NKS

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: rosco0611/javis-fe
      IMAGE_TAG: latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Docker Hub 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 3) Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG "$GITHUB_WORKSPACE"

      # 4) Docker 이미지 Push
      - name: Push Docker image
        run: docker push $IMAGE_NAME:$IMAGE_TAG

      # 5) kubectl 설치
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.1/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      # 6) ServiceAccount 토큰 기반 kubeconfig 배치
      - name: Configure kubeconfig
        run: |
          mkdir -p /home/runner/.kube
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > /home/runner/.kube/config
          chmod 600 /home/runner/.kube/config

      # 7) Kubernetes 매니페스트 적용
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f "$GITHUB_WORKSPACE/k8s/clusterissuer.yaml"
          kubectl apply -f "$GITHUB_WORKSPACE/k8s/backend.yaml"
          kubectl apply -f "$GITHUB_WORKSPACE/k8s/frontend.yaml"
          kubectl apply -f "$GITHUB_WORKSPACE/k8s/ingress.yaml"

          # 롤아웃 완료 확인(프론트)
          kubectl rollout status deployment/javis-fe